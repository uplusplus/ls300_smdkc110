/* linux/drivers/media/video/s5k4ba.h
 *
 * Copyright (c) 2010 Samsung Electronics Co., Ltd.
 * 		http://www.samsung.com/
 *
 * Driver for S5K4BA (UXGA camera) from Samsung Electronics
 * 1/4" 2.0Mp CMOS Image Sensor SoC with an Embedded Image Processor
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#define S5K4BA_COMPLETE
#ifndef __S5K4BA_H__
#define __S5K4BA_H__

struct s5k4ba_reg {
	unsigned char addr;
	unsigned char val;
};

struct s5k4ba_regset_type {
	unsigned char *regset;
	int len;
};

#undef S5K4BA_COMPLETE

/*
 * Macro
 */
#define REGSET_LENGTH(x)	(sizeof(x)/sizeof(s5k4ba_reg))

/*
 * User defined commands
 */
/* S/W defined features for tune */
#define REG_DELAY	0xFF00	/* in ms */
#define REG_CMD		0xFFFF	/* Followed by command */

/* Following order should not be changed */
enum image_size_s5k4ba {
	/* This SoC supports upto UXGA (1600*1200) */
#if 0
	QQVGA,	/* 160*120*/
	QCIF,	/* 176*144 */
	QVGA,	/* 320*240 */
	CIF,	/* 352*288 */
#endif
	VGA,	/* 640*480 */
#if 0
	SVGA,	/* 800*600 */
	HD720P,	/* 1280*720 */
	SXGA,	/* 1280*1024 */
	UXGA,	/* 1600*1200 */
#endif
};

/*
 * Following values describe controls of camera
 * in user aspect and must be match with index of s5k4ba_regset[]
 * These values indicates each controls and should be used
 * to control each control
 */
enum s5k4ba_control {
	S5K4BA_INIT,
	S5K4BA_EV,
	S5K4BA_AWB,
	S5K4BA_MWB,
	S5K4BA_EFFECT,
	S5K4BA_CONTRAST,
	S5K4BA_SATURATION,
	S5K4BA_SHARPNESS,
};

#define S5K4BA_REGSET(x)	{	\
	.regset = x,			\
	.len = sizeof(x)/sizeof(s5k4ba_reg),}


/*
 * User tuned register setting values
 */
static unsigned char s5ka3dfx_init_reg[][2] = {
{0xef, 0x00},
{0xdd, 0x03},
{0xde, 0x00},
{0xdf, 0x1f},
{0xe0, 0x00},
{0xe1, 0x37},
{0xe2, 0x08},
{0xe3, 0x42},
{0xe4, 0x00},
{0xe5, 0x12},
{0xe6, 0x9e},
{0xe9, 0x00},
{0xe7, 0x00},
{0xe8, 0xe2},
{0xe9, 0x01},
{0xe7, 0x00},
{0xe8, 0xe3},
{0xe9, 0x02},
{0xe7, 0x00},
{0xe8, 0xe0},
{0xe9, 0x03},
{0xe7, 0x00},
{0xe8, 0xed},
{0xe9, 0x04},
{0xe7, 0x00},
{0xe8, 0xdd},
{0xe9, 0x05},
{0xe7, 0x00},
{0xe8, 0xd4},
{0xe9, 0x06},
{0xe7, 0x00},
{0xe8, 0xd9},
{0xe9, 0x07},
{0xe7, 0x00},
{0xe8, 0x96},
{0xe9, 0x08},
{0xe7, 0x00},
{0xe8, 0x8b},
{0xe9, 0x09},
{0xe7, 0x00},
{0xe8, 0x99},
{0xe9, 0x0a},
{0xe7, 0x00},
{0xe8, 0x89},
{0xe9, 0x0b},
{0xe7, 0x00},
{0xe8, 0x9a},
{0xe9, 0x0c},
{0xe7, 0x00},
{0xe8, 0x8b},
{0xe9, 0x0d},
{0xe7, 0x00},
{0xe8, 0x7e},
{0xe9, 0x0e},
{0xe7, 0x00},
{0xe8, 0x43},
{0xe9, 0x0f},
{0xe7, 0x00},
{0xe8, 0x2f},
{0xe9, 0x10},
{0xe7, 0x00},
{0xe8, 0x21},
{0xe9, 0x11},
{0xe7, 0x00},
{0xe8, 0x22},
{0xe9, 0x12},
{0xe7, 0x00},
{0xe8, 0x0e},
{0xe9, 0x13},
{0xe7, 0x00},
{0xe8, 0x0f},
{0xe9, 0x14},
{0xe7, 0x00},
{0xe8, 0x0b},
{0xe9, 0x15},
{0xe7, 0x07},
{0xe8, 0xec},
{0xe9, 0x16},
{0xe7, 0x07},
{0xe8, 0xc9},
{0xe9, 0x17},
{0xe7, 0x07},
{0xe8, 0xbe},
{0xe9, 0x18},
{0xe7, 0x07},
{0xe8, 0xba},
{0xe9, 0x19},
{0xe7, 0x07},
{0xe8, 0xbf},
{0xe9, 0x1a},
{0xe7, 0x07},
{0xe8, 0xbc},
{0xe9, 0x1b},
{0xe7, 0x07},
{0xe8, 0xc7},
{0xe9, 0x1c},
{0xe7, 0x07},
{0xe8, 0x94},
{0xe9, 0x1d},
{0xe7, 0x07},
{0xe8, 0x5b},
{0xe9, 0x1e},
{0xe7, 0x07},
{0xe8, 0x56},
{0xe9, 0x1f},
{0xe7, 0x07},
{0xe8, 0x4a},
{0xe9, 0x20},
{0xe7, 0x07},
{0xe8, 0x2a},
{0xe9, 0x21},
{0xe7, 0x07},
{0xe8, 0x37},
{0xe9, 0x22},
{0xe7, 0x07},
{0xe8, 0x47},
{0xe9, 0x40},
{0xef, 0x02},
{0x23, 0x53},
{0x26, 0x14},
{0x2c, 0x05},
{0x05, 0x00},
{0x24, 0x1a},
{0x0b, 0x81},
{0x1e, 0xc7},
{0x56, 0x05},
{0x28, 0x94},
{0xef, 0x02},
{0x59, 0x06},
{0x5b, 0x60},
{0x5a, 0x48},
{0xef, 0x02},
{0xef, 0x03},
{0x50, 0xd2},
{0xef, 0x00},
{0x27, 0x40},
{0x29, 0x60},
{0xef, 0x03},
{0x2b, 0x41},
{0xef, 0x00},
{0x2f, 0x02},
{0xef, 0x00},
{0x36, 0x01},
{0x37, 0xff},
{0x38, 0xd5},
{0x39, 0xbe},
{0x3a, 0x01},
{0x3b, 0x04},
{0x3c, 0x01},
{0x3d, 0x4a},
{0xef, 0x00},
{0x4c, 0x79},
{0x4d, 0xca},
{0x4e, 0x10},
{0x4f, 0x9c},
{0x50, 0x6b},
{0x51, 0x8f},
{0x52, 0x93},
{0x53, 0xab},
{0x54, 0x7f},
{0xef, 0x00},
{0x48, 0x00},
{0x49, 0x00},
{0x4a, 0x0a},
{0x48, 0x01},
{0x49, 0x00},
{0x4a, 0x0f},
{0x48, 0x02},
{0x49, 0x00},
{0x4a, 0x23},
{0x48, 0x03},
{0x49, 0x00},
{0x4a, 0x7a},
{0x48, 0x04},
{0x49, 0x01},
{0x4a, 0x00},
{0x48, 0x05},
{0x49, 0x01},
{0x4a, 0x70},
{0x48, 0x06},
{0x49, 0x01},
{0x4a, 0xcc},
{0x48, 0x07},
{0x49, 0x02},
{0x4a, 0x1e},
{0x48, 0x08},
{0x49, 0x02},
{0x4a, 0x5c},
{0x48, 0x09},
{0x49, 0x02},
{0x4a, 0xa2},
{0x48, 0x0a},
{0x49, 0x02},
{0x4a, 0xd2},
{0x48, 0x0b},
{0x49, 0x02},
{0x4a, 0xff},
{0x48, 0x0c},
{0x49, 0x03},
{0x4a, 0x29},
{0x48, 0x0d},
{0x49, 0x03},
{0x4a, 0x51},
{0x48, 0x0e},
{0x49, 0x03},
{0x4a, 0x77},
{0x48, 0x0f},
{0x49, 0x03},
{0x4a, 0x9b},
{0x48, 0x10},
{0x49, 0x03},
{0x4a, 0xbe},
{0x48, 0x11},
{0x49, 0x03},
{0x4a, 0xdf},
{0x48, 0x12},
{0x49, 0x03},
{0x4a, 0xff},
{0x48, 0x20},
{0x49, 0x00},
{0x4a, 0x0a},
{0x48, 0x21},
{0x49, 0x00},
{0x4a, 0x0f},
{0x48, 0x22},
{0x49, 0x00},
{0x4a, 0x23},
{0x48, 0x23},
{0x49, 0x00},
{0x4a, 0x7a},
{0x48, 0x24},
{0x49, 0x01},
{0x4a, 0x00},
{0x48, 0x25},
{0x49, 0x01},
{0x4a, 0x70},
{0x48, 0x26},
{0x49, 0x01},
{0x4a, 0xcc},
{0x48, 0x27},
{0x49, 0x02},
{0x4a, 0x1e},
{0x48, 0x28},
{0x49, 0x02},
{0x4a, 0x5c},
{0x48, 0x29},
{0x49, 0x02},
{0x4a, 0xa2},
{0x48, 0x2a},
{0x49, 0x02},
{0x4a, 0xd2},
{0x48, 0x2b},
{0x49, 0x02},
{0x4a, 0xff},
{0x48, 0x2c},
{0x49, 0x03},
{0x4a, 0x29},
{0x48, 0x2d},
{0x49, 0x03},
{0x4a, 0x51},
{0x48, 0x2e},
{0x49, 0x03},
{0x4a, 0x77},
{0x48, 0x2f},
{0x49, 0x03},
{0x4a, 0x9b},
{0x48, 0x30},
{0x49, 0x03},
{0x4a, 0xbe},
{0x48, 0x31},
{0x49, 0x03},
{0x4a, 0xdf},
{0x48, 0x32},
{0x49, 0x03},
{0x4a, 0xff},
{0x48, 0x40},
{0x49, 0x00},
{0x4a, 0x0a},
{0x48, 0x41},
{0x49, 0x00},
{0x4a, 0x0f},
{0x48, 0x42},
{0x49, 0x00},
{0x4a, 0x23},
{0x48, 0x43},
{0x49, 0x00},
{0x4a, 0x7a},
{0x48, 0x44},
{0x49, 0x01},
{0x4a, 0x00},
{0x48, 0x45},
{0x49, 0x01},
{0x4a, 0x70},
{0x48, 0x46},
{0x49, 0x01},
{0x4a, 0xcc},
{0x48, 0x47},
{0x49, 0x02},
{0x4a, 0x1e},
{0x48, 0x48},
{0x49, 0x02},
{0x4a, 0x5c},
{0x48, 0x49},
{0x49, 0x02},
{0x4a, 0xa2},
{0x48, 0x4a},
{0x49, 0x02},
{0x4a, 0xd2},
{0x48, 0x4b},
{0x49, 0x02},
{0x4a, 0xff},
{0x48, 0x4c},
{0x49, 0x03},
{0x4a, 0x29},
{0x48, 0x4d},
{0x49, 0x03},
{0x4a, 0x51},
{0x48, 0x4e},
{0x49, 0x03},
{0x4a, 0x77},
{0x48, 0x4f},
{0x49, 0x03},
{0x4a, 0x9b},
{0x48, 0x50},
{0x49, 0x03},
{0x4a, 0xbe},
{0x48, 0x51},
{0x49, 0x03},
{0x4a, 0xdf},
{0x48, 0x52},
{0x49, 0x03},
{0x4a, 0xff},
{0xef, 0x03},
{0x31, 0x00},
{0x32, 0x00},
{0x33, 0x80},
{0x34, 0x80},
{0x36, 0x40},
{0x37, 0x30},
{0x46, 0x03},
{0x7b, 0x30},
{0x38, 0x10},
{0x39, 0x03},
{0xef, 0x03},
{0x2d, 0x12},
{0x2e, 0x1e},
{0x2f, 0x1e},
{0x30, 0x6c},
{0xef, 0x00},
{0x2d, 0x12},
{0xef, 0x00},
{0xb9, 0x02},
{0xbe, 0x40},
{0xc0, 0x40},
{0xef, 0x03},
{0x29, 0x40},
{0x2a, 0x10},
{0xef, 0x00},
{0x75, 0x01},
{0x76, 0xc0},
{0x77, 0x00},
{0x78, 0x24},
{0xef, 0x00},
{0x84, 0x9f},
{0x87, 0x9f},
{0xef, 0x03},
{0x5f, 0x03},
{0x61, 0x18},
{0x60, 0x02},
{0x62, 0x14},
{0x0f, 0x31},
{0xef, 0x03},
{0x13, 0x73},
{0x14, 0x36},
{0xef, 0x03},
{0x26, 0x00},
{0xef, 0x03},
{0x3a, 0x01},
{0x3b, 0x40},
{0x3c, 0x6b},
{0xef, 0x00},
{0x93, 0x40},
{0x94, 0x80},
{0x95, 0xc0},
{0x96, 0x80},
{0x97, 0x20},
{0x98, 0x30},
{0x99, 0x00},
{0xa0, 0x00},
{0xa1, 0x00},
{0xa2, 0x1c},
{0xa3, 0x16},
{0xa4, 0x07},
{0xa5, 0x07},
{0xa6, 0x00},
{0xef, 0x00},
{0xad, 0xff},
{0xaf, 0x30},
{0xef, 0x00},
{0x42, 0x57},
{0x44, 0x54},
{0xef, 0x03},
{0x23, 0x00},
{0x15, 0x0a},
{0x16, 0x00},
{0x17, 0x4f},
{0x18, 0x00},
{0xef, 0x00},
{0xb1, 0x00},
{0xb2, 0x96},
{0xb3, 0x00},
{0xb4, 0x1e},
{0xb5, 0x01},
{0xb6, 0xd6},
{0xb7, 0x02},
{0xb8, 0x62},
{0xef, 0x03},
{0x00, 0x87},
{0x01, 0x4e},
{0x02, 0x07},
{0x04, 0x50},
{0x06, 0x1c},
{0x07, 0x01},
{0x08, 0x01},
{0x4b, 0x04},
{0x51, 0x11},
{0x52, 0x10},
{0x53, 0x02},
{0x54, 0x21},
{0x55, 0x22},
{0x56, 0x22},
{0x57, 0x41},
{0x58, 0x27},
{0x67, 0x7a},
{0x69, 0x17},
{0xef, 0x03},
{0x6e, 0x40},
{0x6f, 0x60},
{0xef, 0x00},
{0x57, 0x00},
{0x58, 0x00},
{0x59, 0x03},
{0x5a, 0x02},
{0x5b, 0x7c},
{0x5c, 0x00},
{0x5d, 0x06},
{0x5e, 0x01},
{0x5f, 0xe0},
{0x60, 0x00},
{0x61, 0x4e},
{0x62, 0x02},
{0x63, 0x35},
{0x64, 0x00},
{0x65, 0x40},
{0x66, 0x01},
{0x67, 0xa5},
{0xef, 0x03},
{0x43, 0x00},
{0x3a, 0x04},
{0x3b, 0x4e},
{0x3c, 0x00},
{0x6b, 0x41},
{0xef, 0x03},
{0x70, 0x03},

};

#define S5KA3DFX_INIT_REGS	\
	(sizeof(s5ka3dfx_init_reg) / sizeof(s5ka3dfx_init_reg[0]))

/*
 * EV bias
 */

static const struct s5k4ba_reg s5k4ba_ev_m6[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_m5[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_m4[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_m3[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_m2[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_m1[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_default[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_p1[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_p2[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_p3[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_p4[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_p5[] = {
};

static const struct s5k4ba_reg s5k4ba_ev_p6[] = {
};

#ifdef S5K4BA_COMPLETE
/* Order of this array should be following the querymenu data */
static const unsigned char *s5k4ba_regs_ev_bias[] = {
	(unsigned char *)s5k4ba_ev_m6, (unsigned char *)s5k4ba_ev_m5,
	(unsigned char *)s5k4ba_ev_m4, (unsigned char *)s5k4ba_ev_m3,
	(unsigned char *)s5k4ba_ev_m2, (unsigned char *)s5k4ba_ev_m1,
	(unsigned char *)s5k4ba_ev_default, (unsigned char *)s5k4ba_ev_p1,
	(unsigned char *)s5k4ba_ev_p2, (unsigned char *)s5k4ba_ev_p3,
	(unsigned char *)s5k4ba_ev_p4, (unsigned char *)s5k4ba_ev_p5,
	(unsigned char *)s5k4ba_ev_p6,
};

/*
 * Auto White Balance configure
 */
static const struct s5k4ba_reg s5k4ba_awb_off[] = {
};

static const struct s5k4ba_reg s5k4ba_awb_on[] = {
};

static const unsigned char *s5k4ba_regs_awb_enable[] = {
	(unsigned char *)s5k4ba_awb_off,
	(unsigned char *)s5k4ba_awb_on,
};

/*
 * Manual White Balance (presets)
 */
static const struct s5k4ba_reg s5k4ba_wb_tungsten[] = {

};

static const struct s5k4ba_reg s5k4ba_wb_fluorescent[] = {

};

static const struct s5k4ba_reg s5k4ba_wb_sunny[] = {

};

static const struct s5k4ba_reg s5k4ba_wb_cloudy[] = {

};

/* Order of this array should be following the querymenu data */
static const unsigned char *s5k4ba_regs_wb_preset[] = {
	(unsigned char *)s5k4ba_wb_tungsten,
	(unsigned char *)s5k4ba_wb_fluorescent,
	(unsigned char *)s5k4ba_wb_sunny,
	(unsigned char *)s5k4ba_wb_cloudy,
};

/*
 * Color Effect (COLORFX)
 */
static const struct s5k4ba_reg s5k4ba_color_sepia[] = {
};

static const struct s5k4ba_reg s5k4ba_color_aqua[] = {
};

static const struct s5k4ba_reg s5k4ba_color_monochrome[] = {
};

static const struct s5k4ba_reg s5k4ba_color_negative[] = {
};

static const struct s5k4ba_reg s5k4ba_color_sketch[] = {
};

/* Order of this array should be following the querymenu data */
static const unsigned char *s5k4ba_regs_color_effect[] = {
	(unsigned char *)s5k4ba_color_sepia,
	(unsigned char *)s5k4ba_color_aqua,
	(unsigned char *)s5k4ba_color_monochrome,
	(unsigned char *)s5k4ba_color_negative,
	(unsigned char *)s5k4ba_color_sketch,
};

/*
 * Contrast bias
 */
static const struct s5k4ba_reg s5k4ba_contrast_m2[] = {
};

static const struct s5k4ba_reg s5k4ba_contrast_m1[] = {
};

static const struct s5k4ba_reg s5k4ba_contrast_default[] = {
};

static const struct s5k4ba_reg s5k4ba_contrast_p1[] = {
};

static const struct s5k4ba_reg s5k4ba_contrast_p2[] = {
};

static const unsigned char *s5k4ba_regs_contrast_bias[] = {
	(unsigned char *)s5k4ba_contrast_m2,
	(unsigned char *)s5k4ba_contrast_m1,
	(unsigned char *)s5k4ba_contrast_default,
	(unsigned char *)s5k4ba_contrast_p1,
	(unsigned char *)s5k4ba_contrast_p2,
};

/*
 * Saturation bias
 */
static const struct s5k4ba_reg s5k4ba_saturation_m2[] = {
};

static const struct s5k4ba_reg s5k4ba_saturation_m1[] = {
};

static const struct s5k4ba_reg s5k4ba_saturation_default[] = {
};

static const struct s5k4ba_reg s5k4ba_saturation_p1[] = {
};

static const struct s5k4ba_reg s5k4ba_saturation_p2[] = {
};

static const unsigned char *s5k4ba_regs_saturation_bias[] = {
	(unsigned char *)s5k4ba_saturation_m2,
	(unsigned char *)s5k4ba_saturation_m1,
	(unsigned char *)s5k4ba_saturation_default,
	(unsigned char *)s5k4ba_saturation_p1,
	(unsigned char *)s5k4ba_saturation_p2,
};

/*
 * Sharpness bias
 */
static const struct s5k4ba_reg s5k4ba_sharpness_m2[] = {
};

static const struct s5k4ba_reg s5k4ba_sharpness_m1[] = {
};

static const struct s5k4ba_reg s5k4ba_sharpness_default[] = {
};

static const struct s5k4ba_reg s5k4ba_sharpness_p1[] = {
};

static const struct s5k4ba_reg s5k4ba_sharpness_p2[] = {
};

static const unsigned char *s5k4ba_regs_sharpness_bias[] = {
	(unsigned char *)s5k4ba_sharpness_m2,
	(unsigned char *)s5k4ba_sharpness_m1,
	(unsigned char *)s5k4ba_sharpness_default,
	(unsigned char *)s5k4ba_sharpness_p1,
	(unsigned char *)s5k4ba_sharpness_p2,
};
#endif /* S5K4BA_COMPLETE */

#endif
